# !!DISCLAIMER!!
# This was adapted from the following source
#   cpp-best-practices/cmake_template
#   https://github.com/cpp-best-practices/cmake_template/tree/1015c6b88410df411c0cc0413e3e64c33d7a8331
#   Courtesy of Jason Turner

name: ci

on:
  pull_request:
    paths-ignore: ['docs/**']
  push:
    tags:
    branches: [main]
    paths-ignore: ['docs/**']
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.os }} ${{ matrix.compiler }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc-11]  # TODO: Add llvm-14; cpptrace does not work without libgcc's _Unwind though
        build_type: [debug, release]
        generator: [Ninja] # TODO: Maybe add Unix Makefiles
        os: [ubuntu-22.04, ubuntu-22.04-arm]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          os: ${{ matrix.os }}
          generator: ${{ matrix.generator }}

      - name: Install Dependencies
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
          ccache: true

      - name: Set CPM cache location
        run: |
          echo "CPM_SOURCE_CACHE=./build/CPM" > .env

      - name: Configure
        run: |
          make configure-${{ matrix.build_type }}

      # We want ccache to be capable of caching PCH
      - name: Set ccache Config
        run: |
          ccache --set-config 'sloppiness=pch_defines,time_macros,include_file_mtime,include_file_ctime'

      - name: Build
        run: |
          make build-${{ matrix.build_type }} CMAKE_CONFIGURE_EXTRA_ARGS="-DASMGRADER_ENABLE_TRACE=ON"

      - name: ccache Stats
        run: |
          ccache -s -v

      - name: Test
        run: |
          LOG_LEVEL=trace make test-${{ matrix.build_type }} CTEST_EXTRA_ARGS="--output-junit \"$PWD/reports/junit-ctest.xml\""

      - uses: actions/upload-artifact@v4  # upload test results
        if: ${{ !cancelled() }}           # run this step even if previous step failed
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: reports/junit*.xml

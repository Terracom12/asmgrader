#pragma once

#include <asmgrader/common/macros.hpp>

#include <fmt/compile.h>
#include <fmt/format.h>
#include <range/v3/iterator.hpp>

#include <array>
#include <string_view>

// @ident@ expressions are substituted by CMake
// clang-format off
#define ASMGRADER_VERSION_MAJOR @AsmGrader_VERSION_MAJOR@
#define ASMGRADER_VERSION_MINOR @AsmGrader_VERSION_MINOR@
#define ASMGRADER_VERSION_PATCH @AsmGrader_VERSION_PATCH@
#define ASMGRADER_VERSION_GIT_HASH @ASMGRADER_VERSION_GIT_HASH@
// clang-format on

#define ASMGRADER_VERSION_STRING                                                                                       \
    STRINGIFY(ASMGRADER_VERSION_MAJOR) "." STRINGIFY(ASMGRADER_VERSION_MINOR) "." STRINGIFY(ASMGRADER_VERSION_PATCH)
#define ASMGRADER_VERSION_GIT_HASH_STRING STRINGIFY(ASMGRADER_VERSION_GIT_HASH)

#ifndef ASMGRADER_EXTRA_VERSION_INFO
/// A string with more version info defined by the library user
/// Most useful for defining a secondary "implementation version" seperate from the library version
#define ASMGRADER_EXTRA_VERSION_INFO ""
#endif

namespace asmgrader {
// The maximum value of any MAJOR / MINOR / PATCH field
constexpr auto MAX_VERSION_FIELD = 99;

consteval unsigned int get_version() {
    static_assert(ASMGRADER_VERSION_MAJOR <= MAX_VERSION_FIELD);
    static_assert(ASMGRADER_VERSION_MINOR <= MAX_VERSION_FIELD);
    static_assert(ASMGRADER_VERSION_PATCH <= MAX_VERSION_FIELD);

    constexpr auto MINOR_MULTIPLIER = MAX_VERSION_FIELD + 1;
    constexpr auto MAJOR_MULTIPLIER = MINOR_MULTIPLIER * MINOR_MULTIPLIER;

    return ASMGRADER_VERSION_MAJOR * MAJOR_MULTIPLIER + ASMGRADER_VERSION_MINOR * MINOR_MULTIPLIER +
           ASMGRADER_VERSION_PATCH;
}

enum class AppMode { Student, Professor };

#ifdef PROFESSOR_VERSION
constexpr auto APP_MODE = AppMode::Professor;
#else
constexpr auto APP_MODE = AppMode::Student;
#endif

} // namespace asmgrader
